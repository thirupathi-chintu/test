version: 2
jobs:
    build:
        environment:
            CC_TEST_REPORTER_ID: code_climate_id_here
            NODE_ENV: development
        docker:
            - image: circleci/node:8
              environment:
                MONGODB_URI: mongodb://admin:password@localhost:27017/db?authSource=admin
            - image: mongo:4.0
              environment:
                MONGO_INITDB_ROOT_USERNAME: admin
                MONGO_INITDB_ROOT_PASSWORD: password
        working_directory: ~/repo
        steps:
            - checkout

            # Update npm
            - run:
                name: update-npm
                command: 'sudo npm install -g npm@latest'

            # Download and cache dependencies
#             - restore_cache:
#                 keys:
#                     - v1-dependencies-{{ checksum "package-lock.json" }}
#                     # fallback to using the latest cache if no exact match is found
#                     - v1-dependencies-

            - run: npm install

            - run: npm install mocha-junit-reporter # just for CircleCI

            - save_cache:
                paths:
                    - node_modules
                key: v1-dependencies-{{ checksum "package-lock.json" }}

            - run: mkdir reports

            # Run mocha
#             - run:
#                 name: npm test
#                 command: ./node_modules/.bin/nyc ./node_modules/.bin/mocha --recursive --timeout=10000 --exit --reporter mocha-junit-reporter --reporter-options mochaFile=reports/mocha/test-results.xml
#                 when: always

            # Run eslint
#             - run:
#                 name: eslint
#                 command: |
#                     ./node_modules/.bin/eslint ./ --format junit --output-file ./reports/eslint/eslint.xml
#                 when: always

            # Run coverage report for Code Climate

            - run:
                name: Setup Code Climate test-reporter
                command: |
                    # download test reporter as a static binary
                    curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
                    chmod +x ./cc-test-reporter
                    ./cc-test-reporter before-build
                when: always

#             - run:
#                 name: code-coverage
#                 command: |
#                     mkdir coverage
#                     # nyc report requires that nyc has already been run,
#                     # which creates the .nyc_output folder containing necessary data
#                     ./node_modules/.bin/nyc report --reporter=text-lcov > coverage/lcov.info
#                     ./cc-test-reporter after-build -t lcov
#                 when: always

            # Upload results

            - store_test_results:
                path: reports

#             - store_artifacts:
#                 path: ./reports/mocha/test-results.xml

#             - store_artifacts:
#                 path: ./reports/eslint/eslint.xml

            - store_artifacts: # upload test coverage as artifact
                path: ./coverage/lcov.info
                prefix: tests

# version: 2.1
# jobs:
#   build:
#     docker:
#      - image: ubuntu
#     working_directory: ~/home
#     steps:
#       - checkout
#       - run: 
#           name: sample
#           command: |
#             date
#             time
      
      
# version: 2.1
# jobs:
#   build:
#     docker:
#      - image: ubuntu
#     working_directory: ~/home
#     steps:
#       - checkout
#       - attach_workspace:
#           at: /root/workspace
#       - run:
#           name: Running test suite
#           command: |
#             if npm run test -- --outputFile test-results.json --json ; then
#               echo 'export TESTS_PASS=true' >> $BASH_ENV
#             else
#               echo 'export TESTS_PASS=false' >> $BASH_ENV
#             fi
#       - store_test_results:
#            path: /tmp/test-results
#       - run:
#           name: dir
#           command: |
#              cd /tmp/test-results
#              ls

    

# jobs:
#   execute_test_runner:
#     steps:
#       - attach_workspace:
#           at: /root/workspace
#       - run:
#           name: Running test suite
#           command: |
#             if npm run test -- --outputFile test-results.json --json ; then
#               echo 'export TESTS_PASS=true' >> $BASH_ENV
#             else
#               echo 'export TESTS_PASS=false' >> $BASH_ENV
#             fi
#       # This test runner job never fails. I'm storing the result as an
#       # environment variable, but it turns out I don't need to
#       # because the danger job will fail if tests are failing.
#       # Left it in here just in case it's useful for anyone.
#       - run:
#           name: Saving test results
#           command: |
#             cp test-results.json \
#               /root/workspace
#       - persist_to_workspace:
#           root: /root/workspace
#           paths:
#             - test-results.json

#   execute_danger:
#     working_directory: /root/project
#     steps:
#       - attach_workspace:
#           at: /root/workspace
#       - checkout:
#           path: /root/project
#       - run:
#           name: Copy test results into project
#           command: |
#             cp ~/workspace/test-results.json \
#               ~/project
#       - run:
#           name: Run danger
#           command: echo "hello world"
#           # Runs dangerjs with danger-plugin-jest
#           # If there are failing tests the plugin will fail this
#           # job by reading from test-results.json
